import { ParseOutputElementBase, ParseOptionsBase } from "../../parse";
import { Parameter } from "../../type";
import { Flatten, OnlyObject, OnlyScalar } from "../../utils";
export declare type FilterOperatorConfig<V, O> = {
    operator: O | O[];
    value: V | V[];
};
export declare enum FilterOperatorLabel {
    NEGATION = "negation",
    LIKE = "like",
    IN = "in"
}
export declare enum FilterOperator {
    NEGATION = "!",
    LIKE = "~",
    IN = ","
}
declare type FilterValue<V> = V extends string | number | boolean ? (V | V[]) : never;
declare type FilterValueWithOperator<V> = V extends string | number | boolean ? (FilterValue<V> | FilterValueOperator<V> | Array<FilterValueOperator<V>>) : never;
declare type FilterValueOperator<V extends string | number | boolean> = `!${V}` | `!~${V}` | `~${V}`;
export declare type FiltersBuildInput<T> = {
    [K in keyof T]?: T[K] extends OnlyScalar<T[K]> ? T[K] | FilterValueWithOperator<T[K]> | FilterOperatorConfig<T[K], FilterOperator> : T[K] extends OnlyObject<T[K]> ? FiltersBuildInput<Flatten<T[K]>> : never;
};
export declare type FiltersParseOptions = ParseOptionsBase<Parameter.FILTERS>;
export declare type FiltersParseOutputElement = ParseOutputElementBase<Parameter.FILTERS, FilterValue<string | number | boolean | null>> & {
    operator?: {
        [K in FilterOperatorLabel]?: boolean;
    };
};
export declare type FiltersParseOutput = FiltersParseOutputElement[];
export {};
//# sourceMappingURL=type.d.ts.map