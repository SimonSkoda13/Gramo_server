import { ParseOutputElementBase, ParseOptionsBase } from "../../parse";
import { Parameter } from "../../type";
import { Flatten, KeyWithOptionalPrefix, OnlyObject, OnlyScalar } from "../../utils";
export declare enum SortDirection {
    ASC = "ASC",
    DESC = "DESC"
}
declare type SortOperatorDesc = '-';
declare type SortWithOperator<T extends Record<string, any>> = KeyWithOptionalPrefix<keyof T, SortOperatorDesc> | KeyWithOptionalPrefix<keyof T, SortOperatorDesc>[];
export declare type SortBuildInput<T> = {
    [K in keyof T]?: T[K] extends OnlyScalar<T[K]> ? SortDirection : T[K] extends OnlyObject<T[K]> ? SortBuildInput<Flatten<T[K]>> | SortWithOperator<Flatten<T[K]>> : never;
} | SortWithOperator<T>;
export declare type SortParseOptions = ParseOptionsBase<Parameter.SORT, string[] | string[][]>;
export declare type SortParseOutputElement = ParseOutputElementBase<Parameter.SORT, SortDirection>;
export declare type SortParseOutput = SortParseOutputElement[];
export {};
//# sourceMappingURL=type.d.ts.map