import { RelationsParseOutput } from "../parameter";
import { ParameterFieldsType, ParameterPaginationType, ParameterRelationsType, ParameterType, URLParameterType } from "../type";
import { ParseParameterOptions, ParseParameterOutput } from "./parameter";
export declare type ParseOptionsBase<K extends ParameterType, A = string[]> = (K extends ParameterPaginationType ? {} : {
    aliasMapping?: Record<string, string>;
    allowed?: A;
    defaultAlias?: string;
}) & (K extends ParameterRelationsType | ParameterPaginationType ? {} : {
    relations?: RelationsParseOutput;
});
export declare type ParseInput = {
    [K in ParameterType | URLParameterType]?: any;
};
export declare type ParseOptions = {
    [K in ParameterType]?: ParseParameterOptions<K> | boolean;
};
export declare type ParseOutput = {
    [K in ParameterType]?: ParseParameterOutput<K>;
};
export declare type ParseOutputElementBase<K extends ParameterType, V extends unknown | undefined = undefined> = (K extends ParameterPaginationType ? {} : {
    key: string;
}) & (K extends ParameterRelationsType ? {} : {
    alias?: string;
}) & (K extends ParameterFieldsType ? {
    value?: V;
} : {
    value: V;
});
//# sourceMappingURL=type.d.ts.map