export declare type Flatten<Type> = Type extends Array<infer Item> ? Item : Type;
export declare type OnlyScalar<T> = T extends string | number | boolean | undefined | null ? T : never;
export declare type OnlySingleObject<T> = T extends {
    [key: string]: any;
} ? T : never;
export declare type OnlyObject<T> = Flatten<T> extends OnlySingleObject<Flatten<T>> ? T | Flatten<T> : never;
export declare type ToOneAndMany<T> = T extends Array<infer Item> ? (Item | Item[]) : (T[] | T);
export declare type KeyWithOptionalPrefix<T, O extends string> = T extends string ? (`${O}${T}` | T) : never;
//# sourceMappingURL=type.d.ts.map