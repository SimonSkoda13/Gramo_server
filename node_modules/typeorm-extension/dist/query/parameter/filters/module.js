"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyFilters = exports.applyQueryFilters = exports.applyQueryFiltersParseOutput = exports.applyFiltersTransformed = exports.transformParsedFilters = void 0;
var query_1 = require("@trapi/query");
var typeorm_1 = require("typeorm");
// --------------------------------------------------
function transformParsedFilters(data, options) {
    var _a;
    var _b;
    options !== null && options !== void 0 ? options : (options = {});
    var items = [];
    for (var key in data) {
        var fullKey = (!!data[key].alias ? data[key].alias + "." : '') + data[key].key;
        var bindingKey = typeof options.bindingKeyFn === 'function' ? options.bindingKeyFn(data[key].key) : undefined;
        if (typeof bindingKey === 'undefined') {
            bindingKey = "filter_" + fullKey.replace('.', '_');
        }
        var queryParts = [
            fullKey
        ];
        var value = data[key].value;
        var filter = data[key];
        (_b = filter.operator) !== null && _b !== void 0 ? _b : (filter.operator = {});
        if ((typeof value === 'string' ||
            typeof value === 'number') &&
            filter.operator.like) {
            value += '%';
        }
        if (filter.operator.in || filter.operator.like) {
            if (filter.operator.negation) {
                queryParts.push('NOT');
            }
            if (filter.operator.like) {
                queryParts.push('LIKE');
            }
            else if (filter.operator.in) {
                queryParts.push('IN');
            }
        }
        else {
            if (filter.operator.negation) {
                queryParts.push('!=');
            }
            else {
                queryParts.push("=");
            }
        }
        if (filter.operator.in) {
            queryParts.push('(:...' + bindingKey + ')');
        }
        else {
            queryParts.push(':' + bindingKey);
        }
        items.push({
            statement: queryParts.join(" "),
            binding: (_a = {}, _a[bindingKey] = value, _a)
        });
    }
    return items;
}
exports.transformParsedFilters = transformParsedFilters;
/**
 * Apply transformed filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 */
function applyFiltersTransformed(query, data) {
    if (data.length === 0) {
        return data;
    }
    /* istanbul ignore next */
    query.andWhere(new typeorm_1.Brackets(function (qb) {
        for (var i = 0; i < data.length; i++) {
            if (i === 0) {
                qb.where(data[i].statement, data[i].binding);
            }
            else {
                qb.andWhere(data[i].statement, data[i].binding);
            }
        }
    }));
    return data;
}
exports.applyFiltersTransformed = applyFiltersTransformed;
/**
 * Apply parsed filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 * @param options
 */
function applyQueryFiltersParseOutput(query, data, options) {
    applyFiltersTransformed(query, transformParsedFilters(data, options));
    return data;
}
exports.applyQueryFiltersParseOutput = applyQueryFiltersParseOutput;
// --------------------------------------------------
/**
 * Apply raw filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 * @param options
 */
function applyQueryFilters(query, data, options) {
    options !== null && options !== void 0 ? options : (options = {});
    var transformOptions = options.transform, parseOptions = __rest(options, ["transform"]);
    return applyQueryFiltersParseOutput(query, (0, query_1.parseQueryFilters)(data, parseOptions), transformOptions);
}
exports.applyQueryFilters = applyQueryFilters;
/**
 * Apply raw filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 * @param options
 */
function applyFilters(query, data, options) {
    return applyQueryFilters(query, data, options);
}
exports.applyFilters = applyFilters;
//# sourceMappingURL=module.js.map